import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export class TeacherController {
  
  // 認証 (/auth)
  async login(req: Request, res: Response) {
    try {
      // JWT認証は既にauthMiddlewareで処理済み
      // 教師ロールの確認
      const teacherId = req.user?.userId;
      const user = await prisma.user.findUnique({
        where: { id: teacherId },
        select: { id: true, name: true, email: true, role: true }
      });

      if (!user || (user.role !== 'TEACHER' && user.role !== 'MENTOR')) {
        return res.status(403).json({ error: 'Teacher or Mentor role required' });
      }

      return res.json({
        success: true,
        data: { user }
      });
    } catch (error) {
      console.error('Teacher login error:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }

  // 生徒管理 - 一覧取得（検索、フィルタ対応）
  async getStudents(req: Request, res: Response) {
    try {
      const teacherId = req.user?.userId;
      const { search, groupId, page = 1, limit = 50 } = req.query;

      if (!teacherId) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      // 教師が担当するクラスの生徒のみ取得
      const whereClause: any = {
        classrooms: {
          some: {
            classroom: { teacherId }
          }
        }
      };

      // 検索条件（氏名、メールアドレス）
      if (search) {
        whereClause.OR = [
          { name: { contains: search as string, mode: 'insensitive' } },
          { email: { contains: search as string, mode: 'insensitive' } }
        ];
      }

      // グループフィルタ
      if (groupId) {
        whereClause.classrooms = {
          some: {
            classroomId: groupId as string,
            classroom: { teacherId }
          }
        };
      }

      const students = await prisma.user.findMany({
        where: whereClause,
        include: {
          classrooms: {
            include: {
              classroom: { select: { id: true, name: true } }
            }
          },
          progress: {
            where: { status: 'COMPLETED' },
            include: { quest: { select: { title: true } } }
          },
          _count: {
            select: { progress: true }
          }
        },
        orderBy: { name: 'asc' },
        skip: (Number(page) - 1) * Number(limit),
        take: Number(limit)
      });

      // teacher.md仕様: 生徒ID, 氏名, メールアドレス, 所属グループ, クエスト進捗率, 最終ログイン日時
      const formattedStudents = students.map(student => ({
        id: student.id,
        name: student.name,
        email: student.email,
        groups: student.classrooms.map(c => c.classroom.name),
        questProgressRate: student._count.progress > 0 ?
          (student.progress.length / student._count.progress) * 100 : 0,
        lastLogin: student.updatedAt // 簡易的に更新日時を使用
      }));

      return res.json({
        success: true,
        data: { students: formattedStudents }
      });
    } catch (error) {
      console.error('Get students error:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }

  // 生徒新規登録
  async createStudent(req: Request, res: Response) {
    try {
      const teacherId = req.user?.userId;
      const { name, email, groupId } = req.body;

      if (!teacherId) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      // 個別登録（teacher.md仕様）
      const student = await prisma.user.create({
        data: {
          name,
          email,
          role: 'STUDENT',
          password: 'temporary_password' // 実際は安全な初期パスワード生成
        }
      });

      // グループ指定があれば追加
      if (groupId) {
        await prisma.classroomStudent.create({
          data: {
            classroomId: groupId,
            studentId: student.id
          }
        });
      }

      return res.status(201).json({
        success: true,
        data: { student: { id: student.id, name: student.name, email: student.email } }
      });
    } catch (error) {
      console.error('Create student error:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }

  // 生徒詳細情報取得
  async getStudent(req: Request, res: Response) {
    try {
      const teacherId = req.user?.userId;
      const { studentId } = req.params;

      if (!teacherId) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      // 担当生徒か確認
      const isAuthorized = await prisma.classroomStudent.findFirst({
        where: {
          studentId,
          classroom: { teacherId }
        }
      });

      if (!isAuthorized) {
        return res.status(403).json({ error: 'Not authorized to view this student' });
      }

      const student = await prisma.user.findUnique({
        where: { id: studentId },
        include: {
          classrooms: {
            include: {
              classroom: { select: { name: true } }
            }
          },
          progress: {
            include: {
              quest: { select: { title: true } }
            }
          }
        }
      });

      // teacher.md仕様のレスポンス形式
      const response = {
        id: student?.id,
        name: student?.name,
        email: student?.email,
        groups: student?.classrooms.map(c => c.classroom.name) || [],
        summary: {
          clearedQuests: student?.progress.filter(p => p.status === 'COMPLETED').length || 0,
          totalStudyTime: 1200 // 仮値、実際は学習時間計算ロジックが必要
        },
        lastLogin: student?.updatedAt || new Date()
      };

      return res.json({
        success: true,
        data: response
      });
    } catch (error) {
      console.error('Get student error:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }

  // 生徒情報更新
  async updateStudent(req: Request, res: Response) {
    try {
      const teacherId = req.user?.userId;
      const { studentId } = req.params;
      const { name, email } = req.body;

      if (!teacherId) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      // 認可チェック
      const isAuthorized = await prisma.classroomStudent.findFirst({
        where: {
          studentId,
          classroom: { teacherId }
        }
      });

      if (!isAuthorized) {
        return res.status(403).json({ error: 'Not authorized' });
      }

      const updatedStudent = await prisma.user.update({
        where: { id: studentId },
        data: { name, email }
      });

      return res.json({
        success: true,
        data: { student: updatedStudent }
      });
    } catch (error) {
      console.error('Update student error:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }

  // 生徒削除
  async deleteStudent(req: Request, res: Response) {
    try {
      const teacherId = req.user?.userId;
      const { studentId } = req.params;

      if (!teacherId) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      // 認可チェック
      const isAuthorized = await prisma.classroomStudent.findFirst({
        where: {
          studentId,
          classroom: { teacherId }
        }
      });

      if (!isAuthorized) {
        return res.status(403).json({ error: 'Not authorized' });
      }

      await prisma.user.delete({
        where: { id: studentId }
      });

      return res.json({
        success: true,
        message: 'Student deleted successfully'
      });
    } catch (error) {
      console.error('Delete student error:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }

  // 以下のメソッドをteacher.md準拠で追加

  // グループ管理 - 一覧取得
  async getGroups(req: Request, res: Response) {
    try {
      const teacherId = req.user?.userId;

      if (!teacherId) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      const groups = await prisma.classroom.findMany({
        where: { teacherId },
        include: {
          students: {
            include: {
              student: { select: { id: true, name: true, email: true } }
            }
          },
          _count: {
            select: { students: true }
          }
        },
        orderBy: { name: 'asc' }
      });

      return res.json({
        success: true,
        data: { groups }
      });
    } catch (error) {
      console.error('Get groups error:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }

  // 新規グループ作成
  async createGroup(req: Request, res: Response) {
    try {
      const teacherId = req.user?.userId;
      const { name, description } = req.body;

      if (!teacherId) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      // 招待コード生成
      const inviteCode = Math.random().toString(36).substring(2, 10).toUpperCase();

      const group = await prisma.classroom.create({
        data: {
          name,
          description,
          inviteCode,
          teacherId
        }
      });

      return res.status(201).json({
        success: true,
        data: { group }
      });
    } catch (error) {
      console.error('Create group error:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }

  // グループ名変更
  async updateGroup(req: Request, res: Response) {
    try {
      const teacherId = req.user?.userId;
      const { groupId } = req.params;
      const { name, description } = req.body;

      if (!teacherId) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      const updatedGroup = await prisma.classroom.update({
        where: { id: groupId, teacherId },
        data: { name, description }
      });

      return res.json({
        success: true,
        data: { group: updatedGroup }
      });
    } catch (error) {
      console.error('Update group error:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }

  // グループに生徒追加
  async addStudentToGroup(req: Request, res: Response) {
    try {
      const teacherId = req.user?.userId;
      const { groupId } = req.params;
      const { studentId } = req.body;

      if (!teacherId) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      // グループの所有権確認
      const group = await prisma.classroom.findFirst({
        where: { id: groupId, teacherId }
      });

      if (!group) {
        return res.status(403).json({ error: 'Not authorized' });
      }

      // teacher.md仕様: 一人の生徒を複数グループに所属可能
      const assignment = await prisma.classroomStudent.create({
        data: {
          classroomId: groupId,
          studentId
        }
      });

      return res.status(201).json({
        success: true,
        data: { assignment }
      });
    } catch (error) {
      console.error('Add student to group error:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }

  // 生徒のクエスト進捗一覧取得
  async getStudentQuests(req: Request, res: Response) {
    try {
      const teacherId = req.user?.userId;
      const { studentId } = req.params;

      if (!teacherId) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      // 認可チェック
      const isAuthorized = await prisma.classroomStudent.findFirst({
        where: {
          studentId,
          classroom: { teacherId }
        }
      });

      if (!isAuthorized) {
        return res.status(403).json({ error: 'Not authorized' });
      }

      const quests = await prisma.progress.findMany({
        where: { userId: studentId },
        include: {
          quest: { select: { id: true, title: true } }
        },
        orderBy: { updatedAt: 'desc' }
      });

      // teacher.md仕様: ステータス（完了, 進行中, 停滞中, 未着手）、開始日、完了日、かかった時間
      const formattedQuests = quests.map(quest => ({
        id: quest.quest.id,
        title: quest.quest.title,
        status: quest.status.toLowerCase().replace('_', '_'), // 'COMPLETED' -> 'completed'
        startDate: quest.createdAt,
        completedDate: quest.status === 'COMPLETED' ? quest.updatedAt : null,
        timeSpent: Math.floor((quest.updatedAt.getTime() - quest.createdAt.getTime()) / (1000 * 60)) // 分単位
      }));

      return res.json({
        success: true,
        data: { quests: formattedQuests }
      });
    } catch (error) {
      console.error('Get student quests error:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }

  // 生徒の学習プロセス詳細取得（参考記事、入力プロンプト、クエスト履歴）
  async getStudentLogs(req: Request, res: Response) {
    try {
      const teacherId = req.user?.userId;
      const { studentId } = req.params;

      if (!teacherId) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      // 認可チェック
      const isAuthorized = await prisma.classroomStudent.findFirst({
        where: {
          studentId,
          classroom: { teacherId }
        }
      });

      if (!isAuthorized) {
        return res.status(403).json({ error: 'Not authorized' });
      }

      // teacher.md仕様: 参考記事、実装したい機能（プロンプト）、生成されたクエスト
      const learningLogs = await prisma.quest.findMany({
        where: { userId: studentId },
        include: {
          progress: {
            where: { userId: studentId },
            select: { createdAt: true, updatedAt: true }
          }
        },
        orderBy: { createdAt: 'desc' }
      });

      const formattedLogs = learningLogs.map(log => ({
        timestamp: log.createdAt,
        referenceArticle: {
          title: log.articleTitle || 'Unknown Article',
          url: log.articleUrl || ''
        },
        implementationPrompt: log.userPrompt || '', // Chrome拡張に入力した実装したい機能
        generatedQuest: {
          id: log.id,
          title: log.title,
          timeSpent: log.progress[0] ?
            Math.floor((log.progress[0].updatedAt.getTime() - log.progress[0].createdAt.getTime()) / (1000 * 60)) : 0
        }
      }));

      return res.json({
        success: true,
        data: { logs: formattedLogs }
      });
    } catch (error) {
      console.error('Get student logs error:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }

  // ダッシュボード - 長時間停滞している生徒リスト
  async getStuckStudents(req: Request, res: Response) {
    try {
      const teacherId = req.user?.userId;

      if (!teacherId) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      // teacher.md仕様: 特定のクエストで長時間停滞している生徒を自動でリストアップ
      const stuckStudents = await prisma.progress.findMany({
        where: {
          status: 'IN_PROGRESS',
          updatedAt: {
            lt: new Date(Date.now() - 2 * 60 * 60 * 1000) // 2時間以上更新なし
          },
          user: {
            classrooms: {
              some: {
                classroom: { teacherId }
              }
            }
          }
        },
        include: {
          user: { select: { id: true, name: true } },
          quest: { select: { title: true } }
        }
      });

      const formattedAlerts = stuckStudents.map(stuck => ({
        studentId: stuck.user.id,
        studentName: stuck.user.name,
        questTitle: stuck.quest.title,
        stuckDuration: Math.floor((Date.now() - stuck.updatedAt.getTime()) / (1000 * 60)) // 分単位
      }));

      return res.json({
        success: true,
        data: { stuckStudents: formattedAlerts }
      });
    } catch (error) {
      console.error('Get stuck students error:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }

  // ダッシュボード - 最近の生徒活動
  async getRecentActivity(req: Request, res: Response) {
    try {
      const teacherId = req.user?.userId;

      if (!teacherId) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      // teacher.md仕様: 最近クエストをクリアした生徒、ログインした生徒の一覧
      const recentCompletions = await prisma.progress.findMany({
        where: {
          status: 'COMPLETED',
          updatedAt: {
            gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // 過去24時間
          },
          user: {
            classrooms: {
              some: {
                classroom: { teacherId }
              }
            }
          }
        },
        include: {
          user: { select: { id: true, name: true } },
          quest: { select: { title: true } }
        },
        orderBy: { updatedAt: 'desc' },
        take: 20
      });

      const recentLogins = await prisma.user.findMany({
        where: {
          updatedAt: {
            gte: new Date(Date.now() - 24 * 60 * 60 * 1000)
          },
          classrooms: {
            some: {
              classroom: { teacherId }
            }
          }
        },
        select: { id: true, name: true, updatedAt: true },
        orderBy: { updatedAt: 'desc' },
        take: 10
      });

      const activities = [
        ...recentCompletions.map(completion => ({
          studentId: completion.user.id,
          studentName: completion.user.name,
          activityType: 'quest_completed' as const,
          details: `クエスト「${completion.quest.title}」を完了しました`,
          timestamp: completion.updatedAt
        })),
        ...recentLogins.map(login => ({
          studentId: login.id,
          studentName: login.name,
          activityType: 'login' as const,
          details: 'ログインしました',
          timestamp: login.updatedAt
        }))
      ].sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());

      return res.json({
        success: true,
        data: { activities }
      });
    } catch (error) {
      console.error('Get recent activity error:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }

  // クエスト一覧（名前、関連記事、難易度、挑戦中生徒数）
  async getQuests(req: Request, res: Response) {
    try {
      const teacherId = req.user?.userId;
      const { search, difficulty } = req.query;

      if (!teacherId) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      const whereClause: any = {};

      // 検索・フィルタ機能
      if (search) {
        whereClause.title = { contains: search as string, mode: 'insensitive' };
      }

      if (difficulty) {
        whereClause.difficulty = difficulty;
      }

      const quests = await prisma.quest.findMany({
        where: whereClause,
        include: {
          progress: {
            where: {
              status: 'IN_PROGRESS',
              user: {
                classrooms: {
                  some: {
                    classroom: { teacherId }
                  }
                }
              }
            }
          },
          _count: {
            select: { progress: true }
          }
        },
        orderBy: { createdAt: 'desc' }
      });

      // teacher.md仕様の表示項目
      const formattedQuests = quests.map(quest => ({
        id: quest.id,
        name: quest.title,
        relatedArticle: {
          title: quest.articleTitle || 'Unknown Article',
          url: quest.articleUrl || ''
        },
        difficulty: quest.difficulty,
        challengingStudentCount: quest.progress.length
      }));

      return res.json({
        success: true,
        data: { quests: formattedQuests }
      });
    } catch (error) {
      console.error('Get quests error:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }

  // 特定クエストを生徒/グループに課題として割り当て
  async assignQuest(req: Request, res: Response) {
    try {
      const teacherId = req.user?.userId;
      const { questId, targetType, targetIds, instruction, dueDate } = req.body;

      if (!teacherId) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      const assignments = [];

      if (targetType === 'students') {
        // 個別生徒への割り当て
        for (const studentId of targetIds) {
          const classroom = await prisma.classroomStudent.findFirst({
            where: {
              studentId,
              classroom: { teacherId }
            },
            include: { classroom: true }
          });

          if (classroom) {
            const assignment = await prisma.assignment.create({
              data: {
                classroomId: classroom.classroomId,
                questId,
                title: instruction || 'クエスト課題',
                instruction: instruction || '',
                dueDate: dueDate ? new Date(dueDate) : null
              }
            });
            assignments.push(assignment);
          }
        }
      } else if (targetType === 'groups') {
        // グループへの割り当て
        for (const groupId of targetIds) {
          const group = await prisma.classroom.findFirst({
            where: { id: groupId, teacherId }
          });

          if (group) {
            const assignment = await prisma.assignment.create({
              data: {
                classroomId: groupId,
                questId,
                title: instruction || 'クエスト課題',
                instruction: instruction || '',
                dueDate: dueDate ? new Date(dueDate) : null
              }
            });
            assignments.push(assignment);
          }
        }
      }

      return res.status(201).json({
        success: true,
        data: { assignments }
      });
    } catch (error) {
      console.error('Assign quest error:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }
}