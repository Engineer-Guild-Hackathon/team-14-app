generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                  @id @default(uuid())
  email             String                  @unique
  password          String
  name              String
  role              UserRole                @default(STUDENT)
  avatar            String?
  bio               String?
  isActive          Boolean                 @default(true)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  badgeAwards       BadgeAward[]
  teacherClassrooms Classroom[]             @relation("TeacherClassrooms")
  studentClassrooms ClassroomStudent[]
  codeHistory       CodeHistory[]
  implementations   Implementation[]
  implComments      ImplementationComment[]
  implLikes         ImplementationLike[]
  learningEvents    LearningEvent[]
  portfolio         Portfolio?
  progress          Progress[]
  projects          Project[]
  quests            Quest[]
  reviewsGiven      Review[]                @relation("ReviewsGiven")
  reviewRequests    ReviewRequest[]         @relation("ReviewRequests")
  summitRecords     SummitRecord[]
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  localPath   String
  gitUrl      String?
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  codeHistory CodeHistory[]
  user        User          @relation(fields: [userId], references: [id])
  quests      Quest[]
}

model Quest {
  id              String           @id @default(uuid())
  title           String
  description     String
  articleUrl      String
  difficulty      Difficulty
  status          QuestStatus      @default(PENDING)
  userId          String
  projectId       String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  assignments     Assignment[]
  codeHistory     CodeHistory[]
  implementations Implementation[]
  learningEvents  LearningEvent[]
  progress        Progress[]
  project         Project          @relation(fields: [projectId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  steps           QuestStep[]
  summitRecords   SummitRecord[]
}

model QuestStep {
  id           String         @id @default(uuid())
  questId      String
  stepNumber   Int
  title        String
  description  String
  type         QuestStepType
  expectedCode String?
  hints        String[]
  isCompleted  Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  quest        Quest          @relation(fields: [questId], references: [id])
  stepProgress StepProgress[]

  @@unique([questId, stepNumber])
}

model Progress {
  id                String         @id @default(uuid())
  userId            String
  questId           String
  status            QuestStatus
  completedSteps    Int            @default(0)
  totalSteps        Int
  timeSpent         Int            @default(0)
  hintsUsed         Int            @default(0)
  errorsEncountered Int            @default(0)
  startedAt         DateTime?
  completedAt       DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  quest             Quest          @relation(fields: [questId], references: [id])
  user              User           @relation(fields: [userId], references: [id])
  stepProgress      StepProgress[]

  @@unique([userId, questId])
}

model StepProgress {
  id          String    @id @default(uuid())
  progressId  String
  stepId      String
  isCompleted Boolean   @default(false)
  attempts    Int       @default(0)
  timeSpent   Int       @default(0)
  hintsUsed   Int       @default(0)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  progress    Progress  @relation(fields: [progressId], references: [id])
  step        QuestStep @relation(fields: [stepId], references: [id])

  @@unique([progressId, stepId])
}

model Classroom {
  id          String             @id @default(uuid())
  name        String
  description String?
  inviteCode  String             @unique
  teacherId   String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  assignments Assignment[]
  teacher     User               @relation("TeacherClassrooms", fields: [teacherId], references: [id])
  students    ClassroomStudent[]
}

model ClassroomStudent {
  id          String    @id @default(uuid())
  classroomId String
  studentId   String
  joinedAt    DateTime  @default(now())
  isActive    Boolean   @default(true)
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  student     User      @relation(fields: [studentId], references: [id])

  @@unique([classroomId, studentId])
}

model Assignment {
  id          String    @id @default(uuid())
  classroomId String
  questId     String
  title       String
  description String?
  dueDate     DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  quest       Quest     @relation(fields: [questId], references: [id])
}

model SummitRecord {
  id                 String          @id @default(uuid())
  userId             String
  questId            String
  title              String
  description        String?
  reflection         String?
  codeSnapshot       Json
  beforeCode         Json?
  implementationTime Int
  articleUrl         String
  techStack          String[]
  isPublic           Boolean         @default(false)
  isPortfolio        Boolean         @default(false)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  badges             BadgeAward[]
  implementation     Implementation?
  portfolioEntry     PortfolioEntry?
  quest              Quest           @relation(fields: [questId], references: [id])
  user               User            @relation(fields: [userId], references: [id])
}

model Portfolio {
  id          String           @id @default(uuid())
  userId      String           @unique
  title       String
  description String?
  isPublic    Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id])
  entries     PortfolioEntry[]
}

model PortfolioEntry {
  id           String       @id @default(uuid())
  portfolioId  String
  summitId     String       @unique
  order        Int
  createdAt    DateTime     @default(now())
  portfolio    Portfolio    @relation(fields: [portfolioId], references: [id])
  summitRecord SummitRecord @relation(fields: [summitId], references: [id])
}

model Badge {
  id          String       @id @default(uuid())
  name        String       @unique
  description String
  icon        String
  condition   String
  createdAt   DateTime     @default(now())
  awards      BadgeAward[]
}

model BadgeAward {
  id           String        @id @default(uuid())
  userId       String
  badgeId      String
  summitId     String?
  awardedAt    DateTime      @default(now())
  badge        Badge         @relation(fields: [badgeId], references: [id])
  summitRecord SummitRecord? @relation(fields: [summitId], references: [id])
  user         User          @relation(fields: [userId], references: [id])

  @@unique([userId, badgeId])
}

model Implementation {
  id            String                  @id @default(uuid())
  userId        String
  questId       String
  summitId      String                  @unique
  title         String
  description   String
  code          Json
  approach      String
  techStack     String[]
  difficulty    Int
  implementTime Int
  articleUrl    String
  articleHash   String
  isAnonymous   Boolean                 @default(false)
  isPublic      Boolean                 @default(false)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  quest         Quest                   @relation(fields: [questId], references: [id])
  summitRecord  SummitRecord            @relation(fields: [summitId], references: [id])
  user          User                    @relation(fields: [userId], references: [id])
  comments      ImplementationComment[]
  likes         ImplementationLike[]
  reviewRequest ReviewRequest?

  @@index([articleHash])
}

model ImplementationLike {
  id               String         @id @default(uuid())
  userId           String
  implementationId String
  createdAt        DateTime       @default(now())
  implementation   Implementation @relation(fields: [implementationId], references: [id])
  user             User           @relation(fields: [userId], references: [id])

  @@unique([userId, implementationId])
}

model ImplementationComment {
  id               String         @id @default(uuid())
  userId           String
  implementationId String
  content          String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  implementation   Implementation @relation(fields: [implementationId], references: [id])
  user             User           @relation(fields: [userId], references: [id])
}

model ReviewRequest {
  id               String         @id @default(uuid())
  requesterId      String
  implementationId String         @unique
  description      String?
  status           ReviewStatus   @default(PENDING)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  reviews          Review[]
  implementation   Implementation @relation(fields: [implementationId], references: [id])
  requester        User           @relation("ReviewRequests", fields: [requesterId], references: [id])
}

model Review {
  id              String        @id @default(uuid())
  reviewRequestId String
  reviewerId      String
  rating          Int
  content         String
  isPublic        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  reviewRequest   ReviewRequest @relation(fields: [reviewRequestId], references: [id])
  reviewer        User          @relation("ReviewsGiven", fields: [reviewerId], references: [id])

  @@unique([reviewRequestId, reviewerId])
}

model CodeHistory {
  id         String     @id @default(uuid())
  userId     String
  projectId  String
  questId    String?
  filePath   String
  changeType ChangeType
  beforeCode String?
  afterCode  String
  lineNumber Int?
  timestamp  DateTime   @default(now())
  project    Project    @relation(fields: [projectId], references: [id])
  quest      Quest?     @relation(fields: [questId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@index([userId, projectId])
  @@index([timestamp])
}

model LearningEvent {
  id        String    @id @default(uuid())
  userId    String
  questId   String
  eventType EventType
  data      Json?
  timestamp DateTime  @default(now())
  quest     Quest     @relation(fields: [questId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId, timestamp])
}

enum UserRole {
  STUDENT
  TEACHER
  MENTOR
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum QuestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum QuestStepType {
  ARRANGE_CODE
  IMPLEMENT_CODE
  VERIFY_OUTPUT
}

enum ChangeType {
  CREATE
  MODIFY
  DELETE
  RENAME
}

enum EventType {
  QUEST_START
  STEP_COMPLETE
  HINT_REQUEST
  ERROR_ENCOUNTER
  ARTICLE_REFERENCE
  CODE_VERIFY
  QUEST_COMPLETE
  BREAK_TAKEN
}

enum ReviewStatus {
  PENDING
  IN_REVIEW
  COMPLETED
  CANCELLED
}
